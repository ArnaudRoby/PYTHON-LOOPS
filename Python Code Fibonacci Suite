#Iterative loops versus Recursive loops with Pyhton : choose wisely !
#Here after are 2 simple examples of Fibonacci calculation using either Iterative or Recursive loops.
#Time is ploted to demonstrate the importance of the choice of the loop method !
#Should you play with this code..... do not require a large number (less than 40 for instance) ! ! !

#Fibonacci with an iterative loop :

def Fibo_iter(x):
    i = 1
    m = 0
    n = 1
    o = 1

    for i in range(1, x, 1):
        o = m + n
        m = n
        n = o
        
    return o
    
#Fibonacci with a recursive loop :

def Fibo_rec(x):
    if ((x == 1) | (x == 2)):
        return 1
    else:
         return Fibo_rec(x-1) + Fibo_rec(x-2)
         
#Test iterative solution :

import time

x = int(input("Fibonacci required term ? "))
t1 = time.time()
res = Fibo_iter(x)
t2 = time.time()
t = t2 - t1
print('Computing time =', t, 's')
print("The", x, "th term of Fibonacci is ", res)

#Test recursive solution :

x = int(input("Fibonacci required term ? "))
t1 = time.time()
res = Fibo_rec(x)
t2 = time.time()
t = (t2 - t1)
print('Computing time =', t, 's')
print("The", x, "th term of Fibonacci is ", res)

#Comparing computation time for the 40 first terms...

t_iter = []
for i in range (1,41):
    x = i
    t1 = time.time()
    res = Fibo_iter(x)
    t2 = time.time()
    t = t2 - t1
    t_iter.append(t)
    print("The", x, "th term of Fibonacci is ", res)
    
print(t_iter)

t_rec = []
for i in range (1,41):
    x = i
    t1 = time.time()
    res = Fibo_rec(x)
    t2 = time.time()
    t = (t2 - t1)
    t_rec.append(t)
    print("The", x, "th term of Fibonacci is ", res)
    
print(t_rec)

#Basic visualization of computing time of each method :

import matplotlib.pyplot as plt
plt.ylabel('Computing Time / Seconds')
plt.xlabel('x-th term of the Fibonacci term')
plt.plot(t_iter, label='Iterative')
plt.plot(t_rec, label='Recursive')
plt.legend()
plt.annotate('Iterative Loop', xy=(38, 22), xytext=(20, 25),
            arrowprops=dict(facecolor='black', shrink=0.05),
            )
plt.show()



